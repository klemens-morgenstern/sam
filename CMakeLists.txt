# Generated by `boostdep --cmake sam`
# Copyright 2020 Peter Dimov
# Distributed under the Boost Software License, Version 1.0.
# https://www.boost.org/LICENSE_1_0.txt

cmake_minimum_required(VERSION 3.5...3.16)

project(boost_sam VERSION "${BOOST_SUPERPROJECT_VERSION}" LANGUAGES CXX)

add_library(boost_sam STATIC src/src.cpp)
add_library(Boost::sam ALIAS boost_sam)

set(BOOST_SAM_IS_ROOT OFF)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
  set(BOOST_SAM_IS_ROOT ON)
endif()

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/../../boost.css AND NOT BOOST_SAM_IS_ROOT)
  set(BOOST_SAM_SHOULD_BE_INLINE ON)
else()
  set(BOOST_SAM_SHOULD_BE_INLINE OFF)
endif()

option(BOOST_SAM_BUILD_INLINE "Configure sam as if part of the boost source tree" ${BOOST_SAM_SHOULD_BE_INLINE})

if(BOOST_SAM_BUILD_INLINE)
  #
  # Building inside Boost tree, but as a separate project e.g. on Travis or
  # other CI, or when producing Visual Studio Solution and Projects.
  if (BOOST_SAM_IS_ROOT)
    set(BOOST_INCLUDE_LIBRARIES sam)
    set(BOOST_EXCLUDE_LIBRARIES sam)
    set(CMAKE_FOLDER _deps)
    add_subdirectory(../.. _deps/boost EXCLUDE_FROM_ALL)
    unset(CMAKE_FOLDER)
  endif()
else()
  find_package(Boost REQUIRED system)
endif()

if(NOT BOOST_SUPERPROJECT_VERSION)
  option(BOOST_SAM_INSTALL "Install boost::sam files" ON)
  option(BOOST_SAM_BUILD_TESTS "Build boost::sam tests" ${BUILD_TESTING})
  option(BOOST_SAM_BUILD_FUZZERS "Build boost::sam fuzzers" ${BOOST_JSON_IS_ROOT})
  option(BOOST_SAM_BUILD_EXAMPLES "Build boost::sam examples" ${BOOST_JSON_IS_ROOT})
  option(BOOST_SAM_BUILD_BENCHMARKS "Build boost::sam benchmarks" OFF)
else()
  set(BOOST_SAM_BUILD_TESTS ${BUILD_TESTING})
endif()

if (BOOST_SAM_STANDALONE)
  add_compile_definitions(BOOST_SAM_STANDALONE=1)
else()
  if (BOOST_SAM_BUILD_INLINE)
    target_link_libraries(boost_sam PUBLIC
            Boost::asio
            Boost::core
            Boost::system
            )
  else()
    target_link_libraries(boost_sam PUBLIC Boost::system)
  endif()
endif()

file(GLOB_RECURSE BOOST_SAM_ADOC_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.adoc)
add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/doc/index.html
        COMMAND asciidoctor ${CMAKE_CURRENT_SOURCE_DIR}/doc/sam.adoc --require asciidoctor-diagram -o ${CMAKE_CURRENT_BINARY_DIR}/doc/index.html
        DEPENDS ${BOOST_SAM_ADOC_FILES})

add_custom_target(doc DEPENDS  ${CMAKE_CURRENT_BINARY_DIR}/doc/index.html)

target_include_directories(boost_sam PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)

if(BUILD_SAM_TESTING AND EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt")
  enable_testing()
  add_subdirectory(test)
endif()

if(BUILD_SAM_EXAMPLES AND NOT BOOST_SAM_STANDALONE AND EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/example/CMakeLists.txt")
  add_subdirectory(example)
endif()

if(BOOST_SAM_BUILD_BENCHMARKS AND EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/bench/CMakeLists.txt")
  add_subdirectory(bench)
endif()